name: Build and Push Subproject Docker Image

on:
  push:
    paths:
      - 'go/notification/**'
      - 'go/notification/version'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 从 VERSION 文件读取版本号
      - name: Read version
        id: version
        working-directory: ./your-go-subdir
        run: |
          # 读取版本文件并去除可能的空白字符
          VERSION=$(cat VERSION | tr -d '[:space:]')
          # 验证版本号格式 (可选)
          if ! echo "$VERSION" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: Invalid version format in VERSION file"
            exit 1
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'  # 修改为你需要的 Go 版本

      # 进入子目录构建
      - name: Build Go binary
        working-directory: ./go/notification
        run: |
          go mod download
          CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./go/notification  # 指定子目录为构建上下文
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/clipshare-notification-server:${{ steps.version.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/clipshare-notification-server:latest
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
